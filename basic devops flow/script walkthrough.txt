CI Pipeline:

1. Bash Script:
# Write your commands here

echo 'Hello world'
pip --version
pip install databricks-cli

databricks workspace import_dir testfolder //Shared -o

JOB_ID=$(databricks jobs create --json '{"name": "checkcsv","existing_cluster_id": "databricks-cluser-id","notebook_task": {"notebook_path": "/Users/abc.pqr@qyz.com/check_for_csv"}}'| jq '.job_id')

echo $JOB_ID
echo $JOB_ID

RUN_ID=$(databricks jobs run-now --job-id $JOB_ID | jq '.run_id')
echo $RUN_ID
job_status="PENDING"
while [ $job_status = "RUNNING" ] || [ $job_status = "PENDING" ]
do
 sleep 2
 job_status=$(databricks runs get --run-id $RUN_ID | jq -r '.state.life_cycle_state')
 echo Status $job_status
done

RESULT=$(databricks runs get-output --run-id $RUN_ID)

RESULT_STATE=$(echo $RESULT | jq -r '.metadata.state.result_state')
RESULT_MESSAGE=$(echo $RESULT | jq -r '.metadata.state.state_message')
if [[ $RESULT_STATE = "FAILED" ]]
then
 echo "##vso[task.logissue type=error;]$RESULT_MESSAGE"
 echo "##vso[task.complete result=Failed;done=true;]$RESULT_MESSAGE"
fi

echo $RESULT


Dont forget to mention DATABRICKS_TOKEN and DATABRICKS_HOST inside environment variables.

2. Publish build artifacts



CD Pipeline:

1. Bash Script:
# Write your commands here

echo 'Hello world'
pip --version
pip install databricks-cli

databricks workspace import_dir testfolder //Shared -o

JOB_ID=$(databricks jobs create --json '{"name": "check_count","existing_cluster_id": "databricks-cluser-id","notebook_task": {"notebook_path": "/Users/abc.pqr@qyz.com/check_count"}}'| jq '.job_id')

echo $JOB_ID
echo $JOB_ID

RUN_ID=$(databricks jobs run-now --job-id $JOB_ID | jq '.run_id')
echo $RUN_ID
job_status="PENDING"
while [ $job_status = "RUNNING" ] || [ $job_status = "PENDING" ]
do
 sleep 2
 job_status=$(databricks runs get --run-id $RUN_ID | jq -r '.state.life_cycle_state')
 echo Status $job_status
done

RESULT=$(databricks runs get-output --run-id $RUN_ID)

RESULT_STATE=$(echo $RESULT | jq -r '.metadata.state.result_state')
RESULT_MESSAGE=$(echo $RESULT | jq -r '.metadata.state.state_message')
if [[ $RESULT_STATE = "FAILED" ]]
then
 echo "##vso[task.logissue type=error;]$RESULT_MESSAGE"
 echo "##vso[task.complete result=Failed;done=true;]$RESULT_MESSAGE"
fi

echo $RESULT

2. Databricks Notebook Deployment